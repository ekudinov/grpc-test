// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: cc49fb3f8e
// Version Date: Пн авг 31 19:09:04 UTC 2020

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/ekudinov/grpc-test/backend/history/proto"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC HistoryServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.HistoryServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// history

		getall: grpctransport.NewServer(
			endpoints.GetAllEndpoint,
			DecodeGRPCGetAllRequest,
			EncodeGRPCGetAllResponse,
			serverOptions...,
		),
		clear: grpctransport.NewServer(
			endpoints.ClearEndpoint,
			DecodeGRPCClearRequest,
			EncodeGRPCClearResponse,
			serverOptions...,
		),
		addevent: grpctransport.NewServer(
			endpoints.AddEventEndpoint,
			DecodeGRPCAddEventRequest,
			EncodeGRPCAddEventResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the HistoryServer interface
type grpcServer struct {
	getall   grpctransport.Handler
	clear    grpctransport.Handler
	addevent grpctransport.Handler
}

// Methods for grpcServer to implement HistoryServer interface

func (s *grpcServer) GetAll(ctx context.Context, req *pb.HistoryRequest) (*pb.GetAllResponse, error) {
	_, rep, err := s.getall.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetAllResponse), nil
}

func (s *grpcServer) Clear(ctx context.Context, req *pb.HistoryRequest) (*pb.ClearResponse, error) {
	_, rep, err := s.clear.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ClearResponse), nil
}

func (s *grpcServer) AddEvent(ctx context.Context, req *pb.AddEventRequest) (*pb.AddEventResponse, error) {
	_, rep, err := s.addevent.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.AddEventResponse), nil
}

// Server Decode

// DecodeGRPCGetAllRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getall request to a user-domain getall request. Primarily useful in a server.
func DecodeGRPCGetAllRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.HistoryRequest)
	return req, nil
}

// DecodeGRPCClearRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC clear request to a user-domain clear request. Primarily useful in a server.
func DecodeGRPCClearRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.HistoryRequest)
	return req, nil
}

// DecodeGRPCAddEventRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC addevent request to a user-domain addevent request. Primarily useful in a server.
func DecodeGRPCAddEventRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.AddEventRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCGetAllResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getall response to a gRPC getall reply. Primarily useful in a server.
func EncodeGRPCGetAllResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetAllResponse)
	return resp, nil
}

// EncodeGRPCClearResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain clear response to a gRPC clear reply. Primarily useful in a server.
func EncodeGRPCClearResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ClearResponse)
	return resp, nil
}

// EncodeGRPCAddEventResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain addevent response to a gRPC addevent reply. Primarily useful in a server.
func EncodeGRPCAddEventResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.AddEventResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
